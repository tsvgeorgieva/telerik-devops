# This workflow will build and push an application to a Azure Kubernetes Service (AKS) cluster when you push your code
#
# This workflow assumes you have already created the target AKS cluster and have created an Azure Container Registry (ACR)
# For instructions see https://docs.microsoft.com/en-us/azure/aks/kubernetes-walkthrough-portal
# https://docs.microsoft.com/en-us/azure/container-registry/container-registry-get-started-portal
# https://github.com/Azure/aks-create-action
#
# To configure this workflow:
#
# 1. Set the following secrets in your repository:
#    - AZURE_CREDENTIALS (instructions for getting this https://github.com/Azure/login#configure-a-service-principal-with-a-secret)
#
# 2. Set the following environment variables (or replace the values below):
#    - AZURE_CONTAINER_REGISTRY (name of your container registry)
#    - PROJECT_NAME
#    - RESOURCE_GROUP (where your cluster is deployed)
#    - CLUSTER_NAME (name of your AKS cluster)
#
# 3. Choose the approrpiate render engine for the bake step https://github.com/Azure/k8s-bake. The config below assumes helm, then set
#    any needed environment variables such as:
#    - CHART_PATH 
#    - CHART_OVERRIDE_PATH
#
# For more information on GitHub Actions for Azure, refer to https://github.com/Azure/Actions
# For more samples to get started with GitHub Action workflows to deploy to Azure, refer to https://github.com/Azure/actions-workflow-samples
# For more options with the actions used below please see the folllowing
# https://github.com/Azure/login
# https://github.com/Azure/aks-set-context
# https://github.com/marketplace/actions/azure-cli-action
# https://github.com/Azure/k8s-bake
# https://github.com/Azure/k8s-deploy   

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  BUILD_VERSION: ''
  AZURE_CONTAINER_REGISTRY: 'tsvetinaRegistry'
  PROJECT_NAME: 'library-app'
  RESOURCE_GROUP: 'telerik-devops'
  CLUSTER_NAME: 'telerik-devops-aks'
  CHART_PATH: './charts/library-app'

jobs:
  semver:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0
    - name: semantic
      uses: paulhatch/semantic-version@v4.0.2
      with:
        # The prefix to use to identify tags
        tag_prefix: "v"
        # A string which, if present in a git commit, indicates that a change represents a
        # major (breaking) change, supports regular expressions wrapped with '/'
        major_pattern: "[Major]"
        # Same as above except indicating a minor change, supports regular expressions wrapped with '/'
        minor_pattern: "[Minor]"
        # A string to determine the format of the version output
        format: "${major}.${minor}.${patch}.${increment}"
        # Optional path to check for changes. If any changes are detected in the path the
        # 'changed' output will true. Enter multiple paths separated by spaces.
        change_path: "src charts"
        # If this is set to true, *every* commit will be treated as a new version.
        bump_each_commit: false
    - name: Print version
      run: echo ${{ steps.semantic.outputs.version }}
    - name: Set version variable
      run: echo "BUILD_VERSION=$(echo ${{ steps.semantic.outputs.version }})" >> $GITHUB_ENV

  test:
    runs-on: ubuntu-latest
    needs: semver
    steps:
    - uses: actions/checkout@v2
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 6.0.x
        
    - name: Restore dependencies
      run: dotnet restore src/Library/Library.WebAPI/Library.WebAPI.csproj
      
    - name: Build
      run: dotnet build src/Library/Library.WebAPI/Library.WebAPI.csproj --no-restore
      
    - name: Test
      run: dotnet test src/Library/Library.sln --no-build --verbosity normal

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@main
    
    # Connect to Azure Container Registry (ACR)
    - uses: azure/docker-login@v1
      with:
        login-server: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }} 
        password: ${{ secrets.REGISTRY_PASSWORD }}
    
    # Container build and push to a Azure Container Registry (ACR)
    - run: |
        docker build . -f Library.WebAPI/Dockerfile -t ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.PROJECT_NAME }}:${{ github.sha }}
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.PROJECT_NAME }}:${{ github.sha }}
      working-directory: src/Library
      
  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@main
    
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: Gets K8s context
      uses: azure/aks-set-context@v1
      with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          resource-group: ${{ env.RESOURCE_GROUP }}
          cluster-name: ${{ env.CLUSTER_NAME }}
      id: login

    - name: Configure deployment
      uses: azure/k8s-bake@v1
      with:
        renderEngine: 'helm'
        helmChart: ${{ env.CHART_PATH }}
        overrides: |     
          image.tag:${{ github.sha }}
        helm-version: 'latest' 
      id: bake

    - name: Deploys application
      uses: Azure/k8s-deploy@v1
      with:
        manifests: ${{ steps.bake.outputs.manifestsBundle }}
        images: |
          ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.PROJECT_NAME }}:${{ github.sha }}
        imagepullsecrets: |
          ${{ env.PROJECT_NAME }}
